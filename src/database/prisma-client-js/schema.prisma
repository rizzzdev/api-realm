// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/database/prisma-client-js"
}

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL_DEV")
// }

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL_PROD")
  directUrl = env("DIRECT_URL_PROD")
}

model Backup {
  id       String @id @default(uuid())
  username String
  password String
}

model Users {
  id         String       @id @default(uuid())
  username   String       @unique
  password   String
  fullName   String
  gender     Gender
  avatarUrl  String
  signedUpAt DateTime
  deletedAt  DateTime?
  role       Role         @default(STUDENT)
  tokens     Tokens[]
  marks      Marks[]
  activities Activities[]
}

model Materials {
  id             String       @id @default(uuid())
  title          String
  description    String
  imageUrl       String
  // materialString String       @db.LongText
  materialString String
  quiz           Quizzes?
  createdAt      DateTime
  deletedAt      DateTime?
  activity       Activities[]
}

model Activities {
  id           String       @id @default(uuid())
  material     Materials?   @relation(fields: [materialId], references: [id])
  materialId   String?
  test         Tests?       @relation(fields: [testId], references: [id])
  testId       String?
  quiz         Quizzes?     @relation(fields: [quizId], references: [id])
  quizId       String?
  activityType ActivityType
  message      String
  user         Users        @relation(fields: [userId], references: [id])
  userId       String
  doneAt       DateTime
}

model Tokens {
  id           String    @id @default(uuid())
  user         Users     @relation(fields: [userId], references: [id])
  userId       String
  loggedInAt   DateTime
  loggedOutAt  DateTime?
  // refreshToken String?   @db.LongText
  refreshToken String?
}

model Tests {
  id          String       @id @default(uuid())
  activity    Activities[]
  questions   Questions[]
  mark        Marks[]
  title       String
  description String
  imageUrl    String
  createdAt   DateTime
  deletedAt   DateTime?
}

model Quizzes {
  id         String       @id @default(uuid())
  material   Materials    @relation(fields: [materialId], references: [id])
  materialId String       @unique @default("")
  questions  Questions[]
  marks      Marks[]
  createdAt  DateTime
  deletedAt  DateTime?
  activity   Activities[]
}

model Questions {
  id            String    @id @default(uuid())
  test          Tests?    @relation(fields: [testId], references: [id])
  testId        String?
  quiz          Quizzes?  @relation(fields: [quizId], references: [id])
  quizId        String?
  question      String
  imageUrl      String?
  optionA       String
  optionB       String
  optionC       String
  optionD       String?
  optionE       String?
  correctOption String
  createdAt     DateTime
  deletedAt     DateTime?
}

model Marks {
  id       String   @id @default(uuid())
  user     Users    @relation(fields: [userId], references: [id])
  userId   String
  test     Tests?   @relation(fields: [testId], references: [id])
  testId   String?
  quiz     Quizzes? @relation(fields: [quizId], references: [id])
  quizId   String?
  mark     Int
  markedAt DateTime

  @@unique([userId, testId])
  @@unique([userId, quizId])
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  STUDENT
  ADMIN
}

enum ActivityType {
  MATERIAL
  QUIZ
  TEST
  SIMULATION
}
